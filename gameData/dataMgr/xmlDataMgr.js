// Generated by CoffeeScript 1.3.3
(function () {
	var DataMgr, DataTable, EventEmitter, async, dataFiles, dataKey, dataMgr, gameLog, jf, xml2js, _, _path,
	__hasProp = {}.hasOwnProperty,
		__extends = function (child, parent) {
			for (var key in parent) {
				if (__hasProp.call(parent, key)) child[key] = parent[key];
			}
			function ctor() {
				this.constructor = child;
			}
			ctor.prototype = parent.prototype;
			child.prototype = new ctor();
			child.__super__ = parent.prototype;
			return child;
		};

	async = require('async');

	xml2js = require('xml2js');

	EventEmitter = require('events').EventEmitter;

	dataFiles = require("./serverDataFiles");

	_ = require('underscore');

	DataTable = require("./xmlDataTable");

	jf = require("jsonfile");

	gameLog = console;

	_path = require("path");

	jf.spaces = 1;

	dataKey = {
		roleAttr: "roleAttr",
		mapInfo: "mapInfo",
		itemTable: "itemTable",
		baseOdds: "baseOdds",
		chapter: "chapter",
		monster: "monster",
		monsterPack: "monsterPack",
		skillTable: "skillTable",
		taskTable: "taskTable"
	};

	DataMgr = (function (_super) {

		__extends(DataMgr, _super);

		DataMgr.haveKey = function (data, key) {
			var value;
			value = data[key];
			return (value != null) && value === 1;
		};

		function DataMgr() {
			this.dataTables_ = {};
			this.dataFileTables_ = {};
		}

		DataMgr.prototype.loadFiles = function () {
			var callback_, config, fileName, files, name, parcallarr, path,
			_this = this;
			if (dataFiles) {
				path = dataFiles.path;
				files = dataFiles.files;
				parcallarr = [];
				for (name in files) {
					config = files[name];
					fileName = path + config.file;
					callback_ = (function (name, fileName, config) {
						return function (callback) {
							var dataTable;
							dataTable = new DataTable(_this);
							return dataTable.loadFromFile(fileName, config, function (err, result) {
								if (!err) {
									_this.dataTables_[name] = dataTable;
									_this.dataFileTables_[dataTable.config_.file] = dataTable.data_;
								}
								return callback(err, result);
							});
						};
					})(name, fileName, config);
					parcallarr.push(callback_);
				}
				return async.parallel(parcallarr, function (err, results) {
					if (err) {
						return gameLog.error(err);
					} else {
						gameLog.info("服务器数据加载完毕!");
						_this.writeJson();
						return _this.emit("fileDone");
					}
				});
			} else {
				return gameLog.error("服务器数据配置文件读取失败!");
			}
		};

		DataMgr.prototype.find = function (name, id) {
			var dataTable;
			dataTable = this.dataTables_[name];
			if (dataTable != null) {
				return dataTable.find(id);
			}
			return null;
		};

		DataMgr.prototype.findWrap = function (name, id) {
			var dataTable;
			dataTable = this.dataTables_[name];
			if (dataTable != null) {
				return dataTable.find(id);
			}
			return null;
		};

		DataMgr.prototype.writeJson = function () {
			var data, name, path, _ref, _results;
			_ref = this.dataFileTables_;
			_results = [];
			for (name in _ref) {
				data = _ref[name];
				path = "../" + (_path.basename(name, ".xml")) + ".json";
				_results.push(jf.writeFileSync(path, data));
			}
			return _results;
		};

		DataMgr.dataTables_;

		DataMgr.dataFileTables_;

		return DataMgr;

	})(EventEmitter);

	dataMgr = new DataMgr;

	module.exports.dataMgr = dataMgr;

	module.exports.dataKey = dataKey;

}).call(this);